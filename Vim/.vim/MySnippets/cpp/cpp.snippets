# General {{{1

snippet mlcomm "Multi-line comment" bA
/*
$0
*/
endsnippet

snippet slcomm "Single-line comment" bA
// $0
endsnippet

snippet prs "string printer" iA
std::cout<<"${1:${VISUAL}}";
endsnippet

#}}}1
# Regex {{{1



#}}}1
# Debugging {{{1

snippet var "variable printer for debugging" bA
std::cout<<"\n[DEBUG] \"$1\" := \""<<$1<<"\".";
endsnippet

priority 1
snippet action1 "." bA
std::cout<<"\n\n[DEBUG] █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ${1:${VISUAL}}\n";
endsnippet

priority 1
snippet action2 "." bA
std::cout<<"\n[DEBUG] ╚═════════════════════════════ ${1:${VISUAL}}\n";
endsnippet

priority 1
snippet action3 "." bA
std::cout<<"\n[DEBUG] └────────────── ${1:${VISUAL}}\n";
endsnippet

#}}}1
# Miscelanous {{{1

snippet class
#ifndef CLASS_`!p snip.rv = t[1].upper()`
#define CLASS_`!p snip.rv = t[1].upper()`

class ${1:Class name}
{
	public:
		$1();
		~$1();
	private:
		
};

#endif // CLASS_`!p snip.rv = t[1].upper()`
endsnippet

snippet bclass
class $1
{
	public:
		$1();
		~$1();
	private:

};$0
endsnippet

snippet ifndef
#ifndef `!p t[1] = snip.rv = t[1].upper()`
#define $1

${VISUAL}$0

#endif // $1
endsnippet 

snippet ;; "." Ai
std::
endsnippet

snippet define
#ifndef `!p snip.rv = t[1].upper()`
#define `!p snip.rv = t[1].upper()`

//DELETE THIS USELESS LINE: $1

#endif // `!p snip.rv = t[1].upper()`
endsnippet

snippet fori "." bA
for($1 i {$2}; i < $3; i++)
{
	$4	
}
endsnippet

#}}}1
# Dyoxigen {{{1

snippet dyoxigen "." 
/**
 * 
 * @brief 
 * @details 
 *
 * @tparam 
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @note 
 * @warning
 *
 * @see
 *
 * Example:
 * @code
 *
 * @endcode
 */
endsnippet

#}}}1
