!1| --------------------------------------------------
!1| Regex searching
!1| --------------------------------------------------


┌──────────┐
│ /# \[2\] │
└──────────┘

# [2]

┌───────────────┐
│ /# _\[\d\+\]_ │
└───────────────┘

# _[1]_
# _[00]_
# _[1112]_

┌───────────────┐
│ ^def \w*(.*): │
└───────────────┘

def init():
def list_cameras():
def quit():
def _check_init():

!1| --------------------------------------------------
!1| Miscelanous
!1| --------------------------------------------------


:g/.\n\n\@!/norm o
	Adds a white line æfter each line
	https://superuser.com/questions/592503/vim-adding-empty-line-between-lines/592508

jlet @+ = getcwd()
:call getcwd()
:pwd
	Gets current working directory
:mksession
	Save buffers

:cd mydirectory
	Changes the current working directory

%! [cmd]
	Replaces the content of the file with the output of that command.

:buf <number>
	Open what the buffer has opened.

:ls <number>
	Lists all the open buffers.

!1| --------------------------------------------------
!1| expand()
!1| --------------------------------------------------


Example: /home/onceiusedwindows/Documents/MyFiles/dc_GithubRepos/personal_notes/vim

expand("%:p") -> full path
	/home/onceiusedwindows/Documents/MyFiles/dc_GithubRepos/personal_notes/vim

expand("%:p:h") -> directory
	/home/onceiusedwindows/Documents/MyFiles/dc_GithubRepos/personal_notes

expand("%") -> file path relative to current working directory
expand("%:c")

expand("%:h") -> directory relative to current working directory

expand("%:t") -> file name including extension
	vim

expand("%:e") -> file extension
	blank

vi{ -> Select the text under the opener excluding the opener.
va{ -> Select the text inside the opener including the opener.


!1| --------------------------------------------------
!1| foldmethods
!1| --------------------------------------------------

general
{
	notes
	{

	}
	keybindings
	{
		zR -> Deletes all present foldings
	}
}

set foldmethod=manual
{
	keybindings
	{
		zf -> folds a visual selected section.
		za -> Unfolds the folded section in where the cursor is
		zr -> Unfolds the folded section in where the cursor is
		zf'a -> Fold from the current line to wherever the mark "a" has been set.
		zfa} -> Create a fold for the current code block
		zd -> Delete the fold at the cursor.
		zD -> Recursively delete folds at the cursor.
	}
}

set foldmethod=indent
{
	notes
	{
		- If first line is empty and it is above an indented block, it won't be indented.
		- If first line begins with a "#" character and it is above an indented block, it won't be indented.
	}
	keybindings
	{
		za -> Toggles folding in the indented block space, or unfolds if folded.
		zr -> It works as "za", but if it is already folded, it doesn't do nothing.
		zM -> Folds all possible blocks.
	}
}
